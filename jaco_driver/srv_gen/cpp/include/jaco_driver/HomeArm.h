/* Auto-generated by genmsg_cpp for file /home/jschmidt/ros/ros-jaco-arm/jaco_driver/srv/HomeArm.srv */
#ifndef JACO_DRIVER_SERVICE_HOMEARM_H
#define JACO_DRIVER_SERVICE_HOMEARM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace jaco_driver
{
template <class ContainerAllocator>
struct HomeArmRequest_ {
  typedef HomeArmRequest_<ContainerAllocator> Type;

  HomeArmRequest_()
  {
  }

  HomeArmRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::jaco_driver::HomeArmRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaco_driver::HomeArmRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HomeArmRequest
typedef  ::jaco_driver::HomeArmRequest_<std::allocator<void> > HomeArmRequest;

typedef boost::shared_ptr< ::jaco_driver::HomeArmRequest> HomeArmRequestPtr;
typedef boost::shared_ptr< ::jaco_driver::HomeArmRequest const> HomeArmRequestConstPtr;


template <class ContainerAllocator>
struct HomeArmResponse_ {
  typedef HomeArmResponse_<ContainerAllocator> Type;

  HomeArmResponse_()
  : homearm_result()
  {
  }

  HomeArmResponse_(const ContainerAllocator& _alloc)
  : homearm_result(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _homearm_result_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  homearm_result;


  typedef boost::shared_ptr< ::jaco_driver::HomeArmResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaco_driver::HomeArmResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HomeArmResponse
typedef  ::jaco_driver::HomeArmResponse_<std::allocator<void> > HomeArmResponse;

typedef boost::shared_ptr< ::jaco_driver::HomeArmResponse> HomeArmResponsePtr;
typedef boost::shared_ptr< ::jaco_driver::HomeArmResponse const> HomeArmResponseConstPtr;

struct HomeArm
{

typedef HomeArmRequest Request;
typedef HomeArmResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct HomeArm
} // namespace jaco_driver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::jaco_driver::HomeArmRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::jaco_driver::HomeArmRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::jaco_driver::HomeArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::jaco_driver::HomeArmRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::jaco_driver::HomeArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaco_driver/HomeArmRequest";
  }

  static const char* value(const  ::jaco_driver::HomeArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::jaco_driver::HomeArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::jaco_driver::HomeArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::jaco_driver::HomeArmRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::jaco_driver::HomeArmResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::jaco_driver::HomeArmResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::jaco_driver::HomeArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "46e470f2c1a7177398c57a43eafe8d67";
  }

  static const char* value(const  ::jaco_driver::HomeArmResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x46e470f2c1a71773ULL;
  static const uint64_t static_value2 = 0x98c57a43eafe8d67ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaco_driver::HomeArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaco_driver/HomeArmResponse";
  }

  static const char* value(const  ::jaco_driver::HomeArmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::jaco_driver::HomeArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string homearm_result\n\
\n\
\n\
";
  }

  static const char* value(const  ::jaco_driver::HomeArmResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::jaco_driver::HomeArmRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HomeArmRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::jaco_driver::HomeArmResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.homearm_result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HomeArmResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<jaco_driver::HomeArm> {
  static const char* value() 
  {
    return "46e470f2c1a7177398c57a43eafe8d67";
  }

  static const char* value(const jaco_driver::HomeArm&) { return value(); } 
};

template<>
struct DataType<jaco_driver::HomeArm> {
  static const char* value() 
  {
    return "jaco_driver/HomeArm";
  }

  static const char* value(const jaco_driver::HomeArm&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<jaco_driver::HomeArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "46e470f2c1a7177398c57a43eafe8d67";
  }

  static const char* value(const jaco_driver::HomeArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<jaco_driver::HomeArmRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaco_driver/HomeArm";
  }

  static const char* value(const jaco_driver::HomeArmRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<jaco_driver::HomeArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "46e470f2c1a7177398c57a43eafe8d67";
  }

  static const char* value(const jaco_driver::HomeArmResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<jaco_driver::HomeArmResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaco_driver/HomeArm";
  }

  static const char* value(const jaco_driver::HomeArmResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // JACO_DRIVER_SERVICE_HOMEARM_H

