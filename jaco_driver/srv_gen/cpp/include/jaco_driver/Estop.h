/* Auto-generated by genmsg_cpp for file /home/jschmidt/ros/ros-jaco-arm/jaco_driver/srv/Estop.srv */
#ifndef JACO_DRIVER_SERVICE_ESTOP_H
#define JACO_DRIVER_SERVICE_ESTOP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace jaco_driver
{
template <class ContainerAllocator>
struct EstopRequest_ {
  typedef EstopRequest_<ContainerAllocator> Type;

  EstopRequest_()
  {
  }

  EstopRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::jaco_driver::EstopRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaco_driver::EstopRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EstopRequest
typedef  ::jaco_driver::EstopRequest_<std::allocator<void> > EstopRequest;

typedef boost::shared_ptr< ::jaco_driver::EstopRequest> EstopRequestPtr;
typedef boost::shared_ptr< ::jaco_driver::EstopRequest const> EstopRequestConstPtr;


template <class ContainerAllocator>
struct EstopResponse_ {
  typedef EstopResponse_<ContainerAllocator> Type;

  EstopResponse_()
  : estop_result()
  {
  }

  EstopResponse_(const ContainerAllocator& _alloc)
  : estop_result(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _estop_result_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  estop_result;


  typedef boost::shared_ptr< ::jaco_driver::EstopResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jaco_driver::EstopResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EstopResponse
typedef  ::jaco_driver::EstopResponse_<std::allocator<void> > EstopResponse;

typedef boost::shared_ptr< ::jaco_driver::EstopResponse> EstopResponsePtr;
typedef boost::shared_ptr< ::jaco_driver::EstopResponse const> EstopResponseConstPtr;

struct Estop
{

typedef EstopRequest Request;
typedef EstopResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Estop
} // namespace jaco_driver

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::jaco_driver::EstopRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::jaco_driver::EstopRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::jaco_driver::EstopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::jaco_driver::EstopRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::jaco_driver::EstopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaco_driver/EstopRequest";
  }

  static const char* value(const  ::jaco_driver::EstopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::jaco_driver::EstopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::jaco_driver::EstopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::jaco_driver::EstopRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::jaco_driver::EstopResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::jaco_driver::EstopResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::jaco_driver::EstopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f64ab946586799a83eedd5cd4b0fa002";
  }

  static const char* value(const  ::jaco_driver::EstopResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf64ab946586799a8ULL;
  static const uint64_t static_value2 = 0x3eedd5cd4b0fa002ULL;
};

template<class ContainerAllocator>
struct DataType< ::jaco_driver::EstopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaco_driver/EstopResponse";
  }

  static const char* value(const  ::jaco_driver::EstopResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::jaco_driver::EstopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string estop_result\n\
\n\
\n\
";
  }

  static const char* value(const  ::jaco_driver::EstopResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::jaco_driver::EstopRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EstopRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::jaco_driver::EstopResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.estop_result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EstopResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<jaco_driver::Estop> {
  static const char* value() 
  {
    return "f64ab946586799a83eedd5cd4b0fa002";
  }

  static const char* value(const jaco_driver::Estop&) { return value(); } 
};

template<>
struct DataType<jaco_driver::Estop> {
  static const char* value() 
  {
    return "jaco_driver/Estop";
  }

  static const char* value(const jaco_driver::Estop&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<jaco_driver::EstopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f64ab946586799a83eedd5cd4b0fa002";
  }

  static const char* value(const jaco_driver::EstopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<jaco_driver::EstopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaco_driver/Estop";
  }

  static const char* value(const jaco_driver::EstopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<jaco_driver::EstopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f64ab946586799a83eedd5cd4b0fa002";
  }

  static const char* value(const jaco_driver::EstopResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<jaco_driver::EstopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jaco_driver/Estop";
  }

  static const char* value(const jaco_driver::EstopResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // JACO_DRIVER_SERVICE_ESTOP_H

